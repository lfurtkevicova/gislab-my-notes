# Makefile for GIS.lab documentations.

# You can set these variables from the command line
#LANGUAGES     = en `ls i18n`
#LANGUAGES     = en ca_ES  da_DK  de  es  fa fi  fr id  it  ja  ko_KR  nl  pt_PT  ro  ru  zh_CN  zh_TW
# as long as this branch is testing, we only build for english:
LANGUAGES     = en 
LANG          = en
SPHINXBUILD   = sphinx-build
#SPHINXINTL    = sphinx-intl
PAPER         =
SOURCEDIR     = source
RESOURCEDIR   = resources
BUILDDIR      = output
# using the -A flag, we create a python variable named 'language', which
# we then can use in html templates to create language dependent switches
SPHINXOPTS    = -D language=$(LANG) -A language=$(LANG) $(SOURCEDIR)
VERSION       = dev

# User-friendly check for sphinx-build
ifeq ($(shell which $(SPHINXBUILD) >/dev/null 2>&1; echo $$?), 1)
$(error The '$(SPHINXBUILD)' command was not found. Make sure you have Sphinx installed.)
endif

# Internal variables.
PAPEROPT_a4     = -D latex_paper_size=a4
PAPEROPT_letter = -D latex_paper_size=letter
ALLSPHINXOPTS   = -d $(BUILDDIR)/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS)
# the i18n builder cannot share the environment and doctrees with the others
I18NSPHINXOPTS  = $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) i18n/pot

.PHONY: help clean html dirhtml singlehtml pickle json htmlhelp qthelp devhelp epub latex latexpdf text man changes linkcheck doctest gettext

help:
	@echo "  "
	@echo "Please use \`make <target> LANG=xx' where xx=language code and <target> is one of:"
	@echo "  html         to build the website as html for enlish only"
	@echo "  world        to create the website for ALL available languages"
	@echo "  clean        to clean up all intermediate files"
	@echo "  springclean  to also remove build output besides normal clean"
	@echo "  createlang   to create (mostly directories) for a new language"
	@echo "  pretranslate to gather all strings from sources, put in .pot files"
	@echo "                  AND merge them with available .po files"
	@echo "  "
	@echo "OPTION: use LANG=xx to do it only for one language, eg: make html LANG=de"
	@echo "  "

clean:
	rm -rf $(SOURCEDIR)/static

springclean: clean
	# something in i18n/pot dir creates havoc when using gettext: remove it
	rm -rf i18n/pot
	rm -rf $(BUILDDIR)/*
	# all .mo files
	find i18n/*/LC_MESSAGES/ -type f -name '*.mo' -delete
	# rm -rf i18n/*/LC_MESSAGES/docs/*/
	# rm -f $(SOURCEDIR)/docs_conf.py*
	# rm -rf $(SOURCEDIR)/docs/*/

# remove all resources from source/static directory
# copy english resources from resources/en to source/static directory
# IF we have a localized build (LANG != en) then
# overwrite with potentially available LANG resources  by
# copy LANG resources from resources/LANG to source/static directory
# TODO: check if LANG != en, for now: unnessecary copy for english
localizeresources: clean
	@echo
	@echo "Removing all static content from $(SOURCEDIR)/static."
	rm -rf $(SOURCEDIR)/static
	@echo "Copy 'en' (base) static content to $(SOURCEDIR)/static."
	mkdir $(SOURCEDIR)/static
	# historically the images for the docs sub project are not in a separate docs folder
	# that is why we copy into root in separate steps
	@if [ -d "$(RESOURCEDIR)/en/docs" ]; then \
		cp -r $(RESOURCEDIR)/en/docs/* $(SOURCEDIR)/static; \
	fi
	@echo "Copy localized '$(LANG)' static content to $(SOURCEDIR)/static."
	@if [ -d "$(RESOURCEDIR)/$(LANG)/docs" ]; then \
		cp -r $(RESOURCEDIR)/$(LANG)/docs/* $(SOURCEDIR)/static; \
	fi

html: localizeresources
#	$(SPHINXINTL) build -l $(LANG) -c $(SOURCEDIR)/conf.py
	$(SPHINXBUILD) -b html $(ALLSPHINXOPTS) $(BUILDDIR)/html/$(VERSION)/$(LANG)
	@echo
	@echo "HTML Build finished. The HTML pages for '$(LANG)' are in $(BUILDDIR)."

# pdf will also make html
pdf: html
	$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex/$(LANG)
	# Compile the pdf docs for that locale
	# we use texi2pdf since latexpdf target is not available via
	# sphinx-build which we need to use since we need to pass language flag
	mkdir -p $(BUILDDIR)/pdf/$(LANG)
	# need to build 3x to have proper toc and index
	# currently texi2pdf has bad exit status. Please ignore errors!!
	# prepending the texi2pdf command with - keeps make going instead of quitting
	# japanese pdf has problems, when build with texi2pdf
	# as alternative we can use platex
	# required parkage texlive-fonts-recommended
	cd $(BUILDDIR)/latex/$(LANG); \
	texi2pdf --quiet GISlab-documentation.tex; \
	texi2pdf --quiet GISlab-documentation.tex; \
	texi2pdf --quiet GISlab-documentation.tex;
	mv $(BUILDDIR)/latex/$(LANG)/GISlab-documentation.pdf $(BUILDDIR)/pdf/$(LANG)/GISlab-$(VERSION)-documentation.pdf
world: all

all:
	@echo
	@echo Building html for the following languages: $(LANGUAGES)
	@echo
	@echo Starting with pulling all translations from transifex
	# --minimum-perc=1 so only files which have at least 1% translation are pulled
	# -f to force, --skip to not stop with errors
	#tx pull --minimum-perc=1 --skip -f
	# ^^^ SHOULD NOT BE DONE ON TESTING/MASTER BRANCH! ONLY ON STABLE==TRANSLATING BRANCH
	mkdir -p live/html/pdf
	# after build quickly rename old live dir, mv output to live dir and then remove old dir
	@for LANG in $(LANGUAGES) ; do \
		make LANG=$$LANG pdf; \
		mkdir -p live/html/$$LANG; \
		mv live/html/$$LANG live/html/$$LANG.old; \
		mv $(BUILDDIR)/html/$$LANG live/html/; \
		cp $(BUILDDIR)/pdf/$$LANG/GISlab-$(VERSION)-documentation.pdf live/html/pdf/GISlab-$(VERSION)-documentation.pdf;  \
		rm -rf live/html/$$LANG.old; \
	done

createlang: springclean
	@echo Creating a new Language: $(LANG)
	mkdir -p resources/${LANG}/docs
	cp resources/en/README resources/${LANG}
	cp resources/en/README resources/${LANG}/docs
	mkdir -p i18n/${LANG}/LC_MESSAGES/docs
	cp i18n/en/README i18n/${LANG}
	cp i18n/en/README i18n/${LANG}/LC_MESSAGES/docs

pretranslate: gettext
	@echo "Generating the pot files"
	$(SPHINXINTL) update -p i18n/pot -c $(SOURCEDIR)/conf.py -l $(LANG)

gettext:
	# something in i18n/pot dir creates havoc when using gettext: remove it
	rm -rf i18n/pot
	$(SPHINXBUILD) -b gettext $(I18NSPHINXOPTS)
	@echo
	@echo "Build finished. The message catalogs are in $(BUILDDIR)/locale."
